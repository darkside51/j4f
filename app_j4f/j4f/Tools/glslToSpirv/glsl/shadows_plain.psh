#version 450

layout (location = 0) in vec2 uv;
layout (location = 1) in float cascadeIndex;
layout (location = 2) in vec4 shadowCoord;

layout (location = 0) out vec4 outFragColor;

layout (binding = 0, set = 1) uniform sampler2D u_texture;
layout (binding = 0, set = 2) uniform sampler2DArray u_shadow_map;

#define ambient 0.3

float textureProj(vec4 shCoord, vec2 offset, uint cascade) {
	float shadow = 1.0;
	float bias = 0.005;

	float dist = texture(u_shadow_map, vec3(shCoord.st + offset, cascade)).r;
	if (dist < shCoord.z - bias) {
		shadow = ambient;
	}

	return shadow;
}

float filterPCF(vec4 sc, uint cascade) {
	ivec2 texDim = textureSize(u_shadow_map, 0).xy;
	float scale = 0.75;
	float dx = scale * 1.0 / float(texDim.x);
	float dy = scale * 1.0 / float(texDim.y);

	float shadowFactor = 0.0;
	int count = 0;
	int range = 1;
	
	for (int x = -range; x <= range; x++) {
		for (int y = -range; y <= range; y++) {
			shadowFactor += textureProj(sc, vec2(dx*x, dy*y), cascade);
			count++;
		}
	}
	return shadowFactor / count;
}

void main() {
	//float shadow = textureProj(shadowCoord / shadowCoord.w, vec2(0.0), cascadeIndex);
	float shadow = filterPCF(shadowCoord / shadowCoord.w, uint(cascadeIndex));
	outFragColor = texture(u_texture, uv, 0.0);
	outFragColor.rgb *= shadow;
}