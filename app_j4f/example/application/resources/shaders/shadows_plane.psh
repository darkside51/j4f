#version 450

#define SHADOW_MAP_CASCADE_COUNT 3

layout (location = 0) in vec2 uv;
layout (location = 1) in float viewDepth;
layout (location = 2) in vec3 position;
layout (location = 3) in vec2 uv2;

layout (location = 0) out vec4 outFragColor;

layout (set = 0, binding = 0) uniform static_UBO {
	vec2 lightMinMax;
	vec4 lightColor;
	vec3 lightDirection;
	float saturation;
} u_constants;

layout (set = 1, binding = 0) uniform shadow_UBO {
	vec4 cascade_splits;
	mat4 cascade_matrix[SHADOW_MAP_CASCADE_COUNT];
	mat4 view;
} u_shadow;

layout (set = 2, binding = 0) uniform sampler2DArray u_shadow_map;
layout (set = 3, binding = 0) uniform sampler2D u_texture_mask;
layout (set = 4, binding = 0) uniform sampler2DArray u_texture_arr;
layout (set = 5, binding = 0) uniform sampler2D u_texture_normal;

#import color_works.psh.glsl

vec3 planeCalculateNormal() {
	vec2 n_uv = 2.0 * uv;//vec2(1.0 - uv.x, 1.0 - uv.y);
	vec3 tangentNormal = texture(u_texture_normal, n_uv, 0.0).xyz * 2.0 - 1.0;

	vec3 N = vec3(0.0, 0.0, 1.0);
	vec3 T = vec3(1.0, 0.0, 0.0);
	vec3 B = vec3(0.0, 1.0, 0.0);
	mat3 TBN = mat3(T, B, N);
	return normalize(TBN * tangentNormal);
}

void main() {
	float mixC = texture(u_texture_mask, uv2, 0.0).r;
	vec4 color1 = texture(u_texture_arr, vec3(uv, 1));
	vec4 color2 =texture(u_texture_arr, vec3(uv, 0));

	// get cascade index for the current fragment's view position
	uint cascade = 0;
	for (uint i = 0; i < (SHADOW_MAP_CASCADE_COUNT - 1); ++i) {
		if (viewDepth < u_shadow.cascade_splits[i]) {	
			cascade = i + 1;
		}
	}

	vec4 shadowCoord = u_shadow.cascade_matrix[cascade] * vec4(position, 1.0);
	shadowCoord.xy = (shadowCoord.xy + 1.0) * 0.5;	

	//float shadow = textureProj(shadowCoord / shadowCoord.w, vec2(0.0), cascade, u_constants.lightMinMax.x);
	float shadow = filterPCF(shadowCoord / shadowCoord.w, cascade, u_constants.lightMinMax.x);
	
	vec3 normal = vec3(0.0, 0.0, 1.0);

	vec4 color = mix(color1, color2, mixC);
	
	//vec3 normal = planeCalculateNormal();

	//const float light = max(dot(normal, -u_constants.lightDirection), 0.0);
	//color.rgb *= (gl_FrontFacing ? shadow : 1.0) * clamp(light, u_constants.lightMinMax.x, 1.0);

	const float light = max(dot(normal, -u_constants.lightDirection), 0.0);
	color.rgb *=  clamp(u_constants.lightMinMax.y * light, u_constants.lightMinMax.x, u_constants.lightMinMax.y);

	outFragColor = u_constants.lightColor * color;
	outFragColor.rgb *= (gl_FrontFacing ? shadow : 1.0);
	
	//outFragColor = vec4(0.5, 0.5, 0.5, 1.0);
	//outFragColor.rgb *= gl_FrontFacing ? shadow : 1.0;

	//float gamma = 2.2;
    //outFragColor.rgb = pow(outFragColor.rgb, vec3(1.0 / gamma));

	outFragColor.rgb = saturate(outFragColor.rgb, u_constants.saturation);

	// debug cascades
	//outFragColor.rgb *= vec3(0.4f + float(cascade) * 0.1);
	/*switch(cascade) {
		case 0:
			outFragColor.rgb *= vec3(1.0, 0.0, 0.0);
			break;
		case 1:
			outFragColor.rgb *= vec3(0.0, 1.0, 0.0);
			break;
		case 2:
			outFragColor.rgb *= vec3(0.0, 0.0, 1.0);
			break;
		case 3:
			outFragColor.rgb *= vec3(1.0, 1.0, 0.0);
			break;
		default:
			break;
	}*/
}