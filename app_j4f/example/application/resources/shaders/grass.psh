#version 450

#define SHADOW_MAP_CASCADE_COUNT 3

layout (location = 0) in vec3 in_normal;
layout (location = 1) in vec2 in_uv;

layout (location = 2) in float in_view_depth;
layout (location = 3) in vec3 in_position;

layout (location = 4) in float in_st;
layout (location = 5) in float in_mix;

layout (location = 0) out vec4 outColor;

layout (set = 0, binding = 0) uniform static_lightUBO {
	vec3 lightDirection;
	vec2 lightMinMax;
	vec4 lightColor;
	float saturation;
} u_constants;

layout (set = 3, binding = 0) uniform shadowUBO {
	vec4 cascade_splits;
	mat4 cascade_matrix[SHADOW_MAP_CASCADE_COUNT];
	mat4 view;
} u_shadow;

layout (set = 1, binding = 0) uniform sampler2DArray u_shadow_map;
layout (set = 4, binding = 0) uniform sampler2DArray u_texture;

#import color_works.psh.glsl

void main() {
	vec2 uv = in_uv;
	uv.x += (1.0 - uv.y) * in_st;

	vec4 color = texture(u_texture, vec3(uv, in_mix));
	if (color.a < 0.75) {
		discard;
	} else {
		// get cascade index for the current fragment's view position
		//color.rgb = mix(color.rgb, color.rgb * vec3(1.0, 0.95, 0.95), in_mix);

		uint cascade = 0;
		for (uint i = 0; i < (SHADOW_MAP_CASCADE_COUNT - 1); ++i) {
			if (in_view_depth < u_shadow.cascade_splits[i]) {	
				cascade = i + 1;
			}
		}

		vec4 shadowCoord = u_shadow.cascade_matrix[cascade] * vec4(in_position, 1.0);
		shadowCoord.xy = (shadowCoord.xy + 1.0) * 0.5;

		float shadow = filterPCF(shadowCoord / shadowCoord.w, cascade, u_constants.lightMinMax.x);

		const float light = clamp(((35.0 + in_position.z) / 50.0), 0.0, 1.0);
		color.rgb *= clamp(light * u_constants.lightMinMax.y, u_constants.lightMinMax.x, u_constants.lightMinMax.y);
		//color.rgb *= clamp(u_constants.lightMinMax.y * light, u_constants.lightMinMax.x, u_constants.lightMinMax.y);
		outColor = u_constants.lightColor * color;
		outColor.rgb *= shadow;

		//float gamma = 2.2;
    	//outColor.rgb = pow(outColor.rgb, vec3(1.0 / gamma));

		outColor.rgb = saturate(outColor.rgb, u_constants.saturation);

		// debug cascades
		/*switch(cascade) {
			case 0:
				outColor.rgb *= vec3(1.0, 0.0, 0.0);
				break;
			case 1:
				outColor.rgb *= vec3(0.0, 1.0, 0.0);
				break;
			case 2:
				outColor.rgb *= vec3(0.0, 0.0, 1.0);
				break;
			case 3:
				outColor.rgb *= vec3(1.0, 1.0, 0.0);
				break;
			default:
				break;
		}*/
	}	
}