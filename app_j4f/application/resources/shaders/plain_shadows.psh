#version 450

layout (location = 0) in vec2 inUv;
layout (location = 1) in vec3 inPos;

layout (location = 0) out vec4 outFragColor;

layout (set = 0, binding = 0) uniform UBO {
	mat4 view;
	vec4 cascade_splits;
	mat4 cascade_matrix[4];
} u_ubo;

layout (binding = 0, set = 1) uniform sampler2D u_texture;
layout (binding = 0, set = 2) uniform sampler2DArray u_shadow_map;

#define ambient 0.3

float textureProj(vec4 shCoord, vec2 offset, uint cascadeIndex) {
	float shadow = 1.0;
	float bias = 0.005;

	float dist = texture(u_shadow_map, vec3(shCoord.st + offset, cascadeIndex)).r;
	if (dist < shCoord.z - bias) {
		shadow = ambient;
	}

	return shadow;
}


float filterPCF(vec4 sc, uint cascadeIndex) {
	ivec2 texDim = textureSize(u_shadow_map, 0).xy;
	float scale = 0.75;
	float dx = scale * 1.0 / float(texDim.x);
	float dy = scale * 1.0 / float(texDim.y);

	float shadowFactor = 0.0;
	int count = 0;
	int range = 1;
	
	for (int x = -range; x <= range; x++) {
		for (int y = -range; y <= range; y++) {
			shadowFactor += textureProj(sc, vec2(dx*x, dy*y), cascadeIndex);
			count++;
		}
	}
	return shadowFactor / count;
}

void main() {	
	vec3 inViewPos = (u_ubo.view * vec4(inPos, 1.0)).xyz;

	// Get cascade index for the current fragment's view position
	uint cascadeIndex = 0;
	for (uint i = 0; i < 3; ++i) {
		if (inViewPos.z < u_ubo.cascade_splits[i]) {	
			cascadeIndex = i + 1;
		}
	}

	vec4 shadowCoord = u_ubo.cascade_matrix[cascadeIndex] * vec4(inPos, 1.0);
	shadowCoord.xy = (shadowCoord.xy + 1.0) * 0.5;	
	
	//float shadow = textureProj(shadowCoord / shadowCoord.w, vec2(0.0), cascadeIndex);
	float shadow = filterPCF(shadowCoord / shadowCoord.w, cascadeIndex);
	outFragColor = texture(u_texture, inUv, 0.0);
	outFragColor.rgb *= shadow;
	//outFragColor = vec4(shadow, shadow, shadow, 1.0);

	/*switch(cascadeIndex) {
			case 0 : 
				outFragColor.rgb *= vec3(1.0f, 0.0f, 0.0f);
				break;
			case 1 : 
				outFragColor.rgb *= vec3(0.0f, 1.0f, 0.0f);
				break;
			case 2 : 
				outFragColor.rgb *= vec3(0.0f, 0.0f, 1.0f);
				break;
			case 3 : 
				outFragColor.rgb *= vec3(1.0f, 1.0f, 0.0f);
				break;
		}*/
}