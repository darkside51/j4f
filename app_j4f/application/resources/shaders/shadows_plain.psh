#version 450

#define SHADOW_MAP_CASCADE_COUNT 4

layout (location = 0) in vec2 uv;
layout (location = 1) in float viewDepth;
layout (location = 2) in vec3 position;
layout (location = 3) in vec2 uv2;

layout (location = 0) out vec4 outFragColor;

layout (set = 0, binding = 0) uniform static_UBO {
	float lightMin;
	vec4 lightColor;
} u_constants;

layout (set = 1, binding = 0) uniform shadow_UBO {
	vec4 cascade_splits;
	mat4 cascade_matrix[SHADOW_MAP_CASCADE_COUNT];
	mat4 view;
} u_shadow;

layout (set = 2, binding = 0) uniform sampler2DArray u_shadow_map;
layout (set = 3, binding = 0) uniform sampler2D u_texture_mask;
layout (set = 4, binding = 0) uniform sampler2DArray u_texture_arr;

float textureProj(vec4 shCoord, vec2 offset, uint cascade) {
	float dist = texture(u_shadow_map, vec3(shCoord.xy + offset, cascade)).r;
	float bias = 0.0001;
	float depth = shCoord.z - bias;
	depth *= step(-1.0, shCoord.z) * step(shCoord.z, 1.0);
	return mix(1.0, u_constants.lightMin, step(dist, depth));
}

float filterPCF(vec4 sc, uint cascade) {
	ivec2 texDim = textureSize(u_shadow_map, 0).xy;
	float scale = 0.5;
	float dx = scale * 1.0 / float(texDim.x);
	float dy = scale * 1.0 / float(texDim.y);

	float shadowFactor = 0.0;
	int count = 0;
	int range = 1;

	for (int x = -range; x <= range; x++) {
		for (int y = -range; y <= range; y++) {
			shadowFactor += textureProj(sc, vec2(dx*x, dy*y), cascade);
			count++;
		}
	}
	return shadowFactor / count;
}

vec3 rgb2hsv(vec3 c) {
    vec4 K = vec4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);
    vec4 p = mix(vec4(c.bg, K.wz), vec4(c.gb, K.xy), step(c.b, c.g));
    vec4 q = mix(vec4(p.xyw, c.r), vec4(c.r, p.yzx), step(p.x, c.r));
    float d = q.x - min(q.w, q.y);
    float e = 1.0e-10;
    return vec3(abs(q.z + (q.w - q.y) / (6.0 * d + e)), d / (q.x + e), q.x);
}

vec3 hsv2rgb(vec3 c) {
    vec4 k = vec4(1.0, 2.0/3.0, 1.0/3.0, 3.0);
    vec3 p = abs(fract(vec3(c.r)+k.xyz)*6.0-k.www);
    return c.b * mix(k.xxx, clamp(p-k.xxx, 0.0, 1.0), c.g);
}

vec3 saturate(vec3 c, float s) {
	c.rgb = rgb2hsv(c.rgb);
	c.g *= s;
	return hsv2rgb(c.rgb);
}

void main() {

	// get cascade index for the current fragment's view position
	uint cascade = 0;
	for (uint i = 0; i < (SHADOW_MAP_CASCADE_COUNT - 1); ++i) {
		if (viewDepth < u_shadow.cascade_splits[i]) {	
			cascade = i + 1;
		}
	}

	vec4 shadowCoord = u_shadow.cascade_matrix[cascade] * vec4(position, 1.0);
	shadowCoord.xy = (shadowCoord.xy + 1.0) * 0.5;	

	//float shadow = textureProj(shadowCoord / shadowCoord.w, vec2(0.0), cascade);
	float shadow = filterPCF(shadowCoord / shadowCoord.w, cascade);

	vec4 color = mix(texture(u_texture_arr, vec3(uv, 1)), texture(u_texture_arr, vec3(uv, 0)), texture(u_texture_mask, uv2, 0.0).r);
	outFragColor = u_constants.lightColor * color;
	
	//outFragColor = vec4(0.5, 0.5, 0.5, 1.0);
	outFragColor.rgb *= gl_FrontFacing ? shadow : 1.0;

	float gamma = 2.2;
    outFragColor.rgb = pow(outFragColor.rgb, vec3(1.0 / gamma));

	outFragColor.rgb = saturate(outFragColor.rgb, 1.5);

	// debug cascades
	//outFragColor.rgb *= vec3(0.4f + float(cascade) * 0.1);
	/*switch(cascade) {
		case 0:
			outFragColor.rgb *= vec3(1.0, 0.0, 0.0);
			break;
		case 1:
			outFragColor.rgb *= vec3(0.0, 1.0, 0.0);
			break;
		case 2:
			outFragColor.rgb *= vec3(0.0, 0.0, 1.0);
			break;
		case 3:
			outFragColor.rgb *= vec3(1.0, 1.0, 0.0);
			break;
		default:
			break;
	}*/
}